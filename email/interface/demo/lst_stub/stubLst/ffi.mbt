// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!

fn wasmImportResourceDropFutureAddResult(resource : Int) = "demo:lst-stub/stub-lst" "[resource-drop]future-add-result"

fn wasmImportResourceDropFutureConnectResult(resource : Int) = "demo:lst-stub/stub-lst" "[resource-drop]future-connect-result"

fn wasmImportResourceDropFutureConnectedEditorsResult(resource : Int) = "demo:lst-stub/stub-lst" "[resource-drop]future-connected-editors-result"

fn wasmImportResourceDropFutureDeleteResult(resource : Int) = "demo:lst-stub/stub-lst" "[resource-drop]future-delete-result"

fn wasmImportResourceDropFutureDisconnectResult(resource : Int) = "demo:lst-stub/stub-lst" "[resource-drop]future-disconnect-result"

fn wasmImportResourceDropFutureGetResult(resource : Int) = "demo:lst-stub/stub-lst" "[resource-drop]future-get-result"

fn wasmImportResourceDropFutureInsertResult(resource : Int) = "demo:lst-stub/stub-lst" "[resource-drop]future-insert-result"

fn wasmImportResourceDropFutureIsArchivedResult(resource : Int) = "demo:lst-stub/stub-lst" "[resource-drop]future-is-archived-result"

fn wasmImportResourceDropFuturePollResult(resource : Int) = "demo:lst-stub/stub-lst" "[resource-drop]future-poll-result"

fn wasmImportResourceDropFutureDeadlineResult(resource : Int) = "demo:lst-stub/stub-lst" "[resource-drop]future-deadline-result"

fn wasmImportResourceDropFutureRecipientsResult(resource : Int) = "demo:lst-stub/stub-lst" "[resource-drop]future-recipients-result"

fn wasmImportResourceDropApi(resource : Int) = "demo:lst-stub/stub-lst" "[resource-drop]api"

fn wasmImportResourceDropEmailQuery(resource : Int) = "demo:lst-stub/stub-lst" "[resource-drop]email-query"
fn wasmImportMethodFutureAddResultSubscribe(p0 : Int) -> Int = "demo:lst-stub/stub-lst" "[method]future-add-result.subscribe"
fn wasmImportMethodFutureAddResultGet(p0 : Int, p1 : Int)  = "demo:lst-stub/stub-lst" "[method]future-add-result.get"
fn wasmImportMethodFutureConnectResultSubscribe(p0 : Int) -> Int = "demo:lst-stub/stub-lst" "[method]future-connect-result.subscribe"
fn wasmImportMethodFutureConnectResultGet(p0 : Int, p1 : Int)  = "demo:lst-stub/stub-lst" "[method]future-connect-result.get"
fn wasmImportMethodFutureConnectedEditorsResultSubscribe(p0 : Int) -> Int = "demo:lst-stub/stub-lst" "[method]future-connected-editors-result.subscribe"
fn wasmImportMethodFutureConnectedEditorsResultGet(p0 : Int, p1 : Int)  = "demo:lst-stub/stub-lst" "[method]future-connected-editors-result.get"
fn wasmImportMethodFutureDeleteResultSubscribe(p0 : Int) -> Int = "demo:lst-stub/stub-lst" "[method]future-delete-result.subscribe"
fn wasmImportMethodFutureDeleteResultGet(p0 : Int, p1 : Int)  = "demo:lst-stub/stub-lst" "[method]future-delete-result.get"
fn wasmImportMethodFutureDisconnectResultSubscribe(p0 : Int) -> Int = "demo:lst-stub/stub-lst" "[method]future-disconnect-result.subscribe"
fn wasmImportMethodFutureDisconnectResultGet(p0 : Int, p1 : Int)  = "demo:lst-stub/stub-lst" "[method]future-disconnect-result.get"
fn wasmImportMethodFutureGetResultSubscribe(p0 : Int) -> Int = "demo:lst-stub/stub-lst" "[method]future-get-result.subscribe"
fn wasmImportMethodFutureGetResultGet(p0 : Int, p1 : Int)  = "demo:lst-stub/stub-lst" "[method]future-get-result.get"
fn wasmImportMethodFutureInsertResultSubscribe(p0 : Int) -> Int = "demo:lst-stub/stub-lst" "[method]future-insert-result.subscribe"
fn wasmImportMethodFutureInsertResultGet(p0 : Int, p1 : Int)  = "demo:lst-stub/stub-lst" "[method]future-insert-result.get"
fn wasmImportMethodFutureIsArchivedResultSubscribe(p0 : Int) -> Int = "demo:lst-stub/stub-lst" "[method]future-is-archived-result.subscribe"
fn wasmImportMethodFutureIsArchivedResultGet(p0 : Int, p1 : Int)  = "demo:lst-stub/stub-lst" "[method]future-is-archived-result.get"
fn wasmImportMethodFuturePollResultSubscribe(p0 : Int) -> Int = "demo:lst-stub/stub-lst" "[method]future-poll-result.subscribe"
fn wasmImportMethodFuturePollResultGet(p0 : Int, p1 : Int)  = "demo:lst-stub/stub-lst" "[method]future-poll-result.get"
fn wasmImportMethodFutureDeadlineResultSubscribe(p0 : Int) -> Int = "demo:lst-stub/stub-lst" "[method]future-deadline-result.subscribe"
fn wasmImportMethodFutureDeadlineResultGet(p0 : Int, p1 : Int)  = "demo:lst-stub/stub-lst" "[method]future-deadline-result.get"
fn wasmImportMethodFutureRecipientsResultSubscribe(p0 : Int) -> Int = "demo:lst-stub/stub-lst" "[method]future-recipients-result.subscribe"
fn wasmImportMethodFutureRecipientsResultGet(p0 : Int, p1 : Int)  = "demo:lst-stub/stub-lst" "[method]future-recipients-result.get"
fn wasmImportConstructorApi(p0 : Int, p1 : Int) -> Int = "demo:lst-stub/stub-lst" "[constructor]api"
fn wasmImportMethodApiBlockingAdd(p0 : Int, p1 : Int64, p2 : Int, p3 : Int, p4 : Int)  = "demo:lst-stub/stub-lst" "[method]api.blocking-add"
fn wasmImportMethodApiAdd(p0 : Int, p1 : Int64, p2 : Int, p3 : Int) -> Int = "demo:lst-stub/stub-lst" "[method]api.add"
fn wasmImportMethodApiBlockingArchive(p0 : Int)  = "demo:lst-stub/stub-lst" "[method]api.blocking-archive"
fn wasmImportMethodApiArchive(p0 : Int)  = "demo:lst-stub/stub-lst" "[method]api.archive"
fn wasmImportMethodApiBlockingConnect(p0 : Int, p1 : Int, p2 : Int, p3 : Int)  = "demo:lst-stub/stub-lst" "[method]api.blocking-connect"
fn wasmImportMethodApiConnect(p0 : Int, p1 : Int, p2 : Int) -> Int = "demo:lst-stub/stub-lst" "[method]api.connect"
fn wasmImportMethodApiBlockingConnectedEditors(p0 : Int, p1 : Int)  = "demo:lst-stub/stub-lst" "[method]api.blocking-connected-editors"
fn wasmImportMethodApiConnectedEditors(p0 : Int) -> Int = "demo:lst-stub/stub-lst" "[method]api.connected-editors"
fn wasmImportMethodApiBlockingDelete(p0 : Int, p1 : Int64, p2 : Int, p3 : Int, p4 : Int)  = "demo:lst-stub/stub-lst" "[method]api.blocking-delete"
fn wasmImportMethodApiDelete(p0 : Int, p1 : Int64, p2 : Int, p3 : Int) -> Int = "demo:lst-stub/stub-lst" "[method]api.delete"
fn wasmImportMethodApiBlockingDisconnect(p0 : Int, p1 : Int64, p2 : Int)  = "demo:lst-stub/stub-lst" "[method]api.blocking-disconnect"
fn wasmImportMethodApiDisconnect(p0 : Int, p1 : Int64) -> Int = "demo:lst-stub/stub-lst" "[method]api.disconnect"
fn wasmImportMethodApiBlockingGet(p0 : Int, p1 : Int)  = "demo:lst-stub/stub-lst" "[method]api.blocking-get"
fn wasmImportMethodApiGet(p0 : Int) -> Int = "demo:lst-stub/stub-lst" "[method]api.get"
fn wasmImportMethodApiBlockingInsert(p0 : Int, p1 : Int64, p2 : Int, p3 : Int, p4 : Int, p5 : Int, p6 : Int)  = "demo:lst-stub/stub-lst" "[method]api.blocking-insert"
fn wasmImportMethodApiInsert(p0 : Int, p1 : Int64, p2 : Int, p3 : Int, p4 : Int, p5 : Int) -> Int = "demo:lst-stub/stub-lst" "[method]api.insert"
fn wasmImportMethodApiBlockingIsArchived(p0 : Int) -> Int = "demo:lst-stub/stub-lst" "[method]api.blocking-is-archived"
fn wasmImportMethodApiIsArchived(p0 : Int) -> Int = "demo:lst-stub/stub-lst" "[method]api.is-archived"
fn wasmImportMethodApiBlockingPoll(p0 : Int, p1 : Int64, p2 : Int)  = "demo:lst-stub/stub-lst" "[method]api.blocking-poll"
fn wasmImportMethodApiPoll(p0 : Int, p1 : Int64) -> Int = "demo:lst-stub/stub-lst" "[method]api.poll"
fn wasmImportConstructorEmailQuery(p0 : Int, p1 : Int) -> Int = "demo:lst-stub/stub-lst" "[constructor]email-query"
fn wasmImportMethodEmailQueryBlockingDeadline(p0 : Int, p1 : Int)  = "demo:lst-stub/stub-lst" "[method]email-query.blocking-deadline"
fn wasmImportMethodEmailQueryDeadline(p0 : Int) -> Int = "demo:lst-stub/stub-lst" "[method]email-query.deadline"
fn wasmImportMethodEmailQueryBlockingRecipients(p0 : Int, p1 : Int)  = "demo:lst-stub/stub-lst" "[method]email-query.blocking-recipients"
fn wasmImportMethodEmailQueryRecipients(p0 : Int) -> Int = "demo:lst-stub/stub-lst" "[method]email-query.recipients"

