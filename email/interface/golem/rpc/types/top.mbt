// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!

pub(all) struct Uri {
      value : String
} derive(Show)

pub(all) enum WitNode {
      RecordValue(Array[Int])
      VariantValue((UInt, Int?))
      EnumValue(UInt)
      FlagsValue(Array[Bool])
      TupleValue(Array[Int])
      ListValue(Array[Int])
      OptionValue(Int?)
      ResultValue(Result[Int?, Int?])
      PrimU8(Byte)
      PrimU16(UInt)
      PrimU32(UInt)
      PrimU64(UInt64)
      PrimS8(Int)
      PrimS16(Int)
      PrimS32(Int)
      PrimS64(Int64)
      PrimFloat32(Float)
      PrimFloat64(Double)
      PrimChar(Char)
      PrimBool(Bool)
      PrimString(String)
      Handle((Uri, UInt64))
} derive(Show)

pub(all) struct WitValue {
      nodes : Array[WitNode]
} derive(Show)

pub(all) type! RpcError {
      ProtocolError(String)
      Denied(String)
      NotFound(String)
      RemoteInternalError(String)
} derive(Show)

pub(all) type WasmRpc Int derive(Show)

/// Drops a resource handle.
pub fn WasmRpc::drop(self : WasmRpc) -> Unit {
      let WasmRpc(resource) = self
      wasmImportResourceDropWasmRpc(resource)
}

pub(all) type FutureInvokeResult Int derive(Show)

/// Drops a resource handle.
pub fn FutureInvokeResult::drop(self : FutureInvokeResult) -> Unit {
      let FutureInvokeResult(resource) = self
      wasmImportResourceDropFutureInvokeResult(resource)
}

pub fn WasmRpc::wasm_rpc(location : Uri) -> WasmRpc {

      let result : Int =  wasmImportConstructorWasmRpc(@ffi.str2ptr((location).value), (location).value.iter().count());
      ignore((location).value)
      return WasmRpc::WasmRpc(result)

}

pub fn WasmRpc::invoke_and_await(self : WasmRpc, function_name : String, function_params : Array[WitValue]) -> Result[WitValue, RpcError] {
      let cleanupList : Array[@ffi.Cleanup] = []
      let ignoreList : Array[&@ffi.Any] = []

      let WasmRpc(handle) = self

      let address113 = @ffi.malloc((function_params).length() * 8);
      for index114 = 0; index114 < (function_params).length(); index114 = index114 + 1 {
            let element : WitValue = (function_params)[(index114)]
            let base = address113 + (index114 * 8);

            let address111 = @ffi.malloc(((element).nodes).length() * 24);
            for index112 = 0; index112 < ((element).nodes).length(); index112 = index112 + 1 {
                  let element0 : WitNode = ((element).nodes)[(index112)]
                  let base1 = address111 + (index112 * 24);

                  match element0 {
                        RecordValue(payload) => {
                              @ffi.store8((base1) + 0, (0))

                              let address = @ffi.malloc((payload).length() * 4);
                              for index = 0; index < (payload).length(); index = index + 1 {
                                    let element4 : Int = (payload)[(index)]
                                    let base5 = address + (index * 4);
                                    @ffi.store32((base5) + 0, element4)

                              }
                              @ffi.store32((base1) + 12, (payload).length())
                              @ffi.store32((base1) + 8, address)
                              cleanupList.push({address: address, size: (payload).length() * 4, align: 4})

                              ()
                        }
                        VariantValue(payload8) => {
                              @ffi.store8((base1) + 0, (1))
                              @ffi.store32((base1) + 8, ((payload8).0).reinterpret_as_int())

                              match (((payload8).1)) {
                                    None => {
                                          @ffi.store8((base1) + 12, (0))

                                          ()
                                    }
                                    Some(payload14) => {
                                          @ffi.store8((base1) + 12, (1))
                                          @ffi.store32((base1) + 16, payload14)

                                          ()
                                    }
                              }

                              ()
                        }
                        EnumValue(payload17) => {
                              @ffi.store8((base1) + 0, (2))
                              @ffi.store32((base1) + 8, (payload17).reinterpret_as_int())

                              ()
                        }
                        FlagsValue(payload20) => {
                              @ffi.store8((base1) + 0, (3))

                              let address23 = @ffi.malloc((payload20).length() * 1);
                              for index24 = 0; index24 < (payload20).length(); index24 = index24 + 1 {
                                    let element21 : Bool = (payload20)[(index24)]
                                    let base22 = address23 + (index24 * 1);
                                    @ffi.store8((base22) + 0, (if element21 { 1 } else { 0 }))

                              }
                              @ffi.store32((base1) + 12, (payload20).length())
                              @ffi.store32((base1) + 8, address23)
                              cleanupList.push({address: address23, size: (payload20).length() * 1, align: 1})

                              ()
                        }
                        TupleValue(payload27) => {
                              @ffi.store8((base1) + 0, (4))

                              let address30 = @ffi.malloc((payload27).length() * 4);
                              for index31 = 0; index31 < (payload27).length(); index31 = index31 + 1 {
                                    let element28 : Int = (payload27)[(index31)]
                                    let base29 = address30 + (index31 * 4);
                                    @ffi.store32((base29) + 0, element28)

                              }
                              @ffi.store32((base1) + 12, (payload27).length())
                              @ffi.store32((base1) + 8, address30)
                              cleanupList.push({address: address30, size: (payload27).length() * 4, align: 4})

                              ()
                        }
                        ListValue(payload34) => {
                              @ffi.store8((base1) + 0, (5))

                              let address37 = @ffi.malloc((payload34).length() * 4);
                              for index38 = 0; index38 < (payload34).length(); index38 = index38 + 1 {
                                    let element35 : Int = (payload34)[(index38)]
                                    let base36 = address37 + (index38 * 4);
                                    @ffi.store32((base36) + 0, element35)

                              }
                              @ffi.store32((base1) + 12, (payload34).length())
                              @ffi.store32((base1) + 8, address37)
                              cleanupList.push({address: address37, size: (payload34).length() * 4, align: 4})

                              ()
                        }
                        OptionValue(payload41) => {
                              @ffi.store8((base1) + 0, (6))

                              match ((payload41)) {
                                    None => {
                                          @ffi.store8((base1) + 8, (0))

                                          ()
                                    }
                                    Some(payload47) => {
                                          @ffi.store8((base1) + 8, (1))
                                          @ffi.store32((base1) + 12, payload47)

                                          ()
                                    }
                              }

                              ()
                        }
                        ResultValue(payload50) => {
                              @ffi.store8((base1) + 0, (7))

                              match payload50 {
                                    Ok(payload53) => {
                                          @ffi.store8((base1) + 8, (0))

                                          match ((payload53)) {
                                                None => {
                                                      @ffi.store8((base1) + 12, (0))

                                                      ()
                                                }
                                                Some(payload59) => {
                                                      @ffi.store8((base1) + 12, (1))
                                                      @ffi.store32((base1) + 16, payload59)

                                                      ()
                                                }
                                          }

                                          ()
                                    }
                                    Err(payload62) => {
                                          @ffi.store8((base1) + 8, (1))

                                          match ((payload62)) {
                                                None => {
                                                      @ffi.store8((base1) + 12, (0))

                                                      ()
                                                }
                                                Some(payload68) => {
                                                      @ffi.store8((base1) + 12, (1))
                                                      @ffi.store32((base1) + 16, payload68)

                                                      ()
                                                }
                                          }

                                          ()
                                    }
                              }

                              ()
                        }
                        PrimU8(payload71) => {
                              @ffi.store8((base1) + 0, (8))
                              @ffi.store8((base1) + 8, (payload71).to_int())

                              ()
                        }
                        PrimU16(payload74) => {
                              @ffi.store8((base1) + 0, (9))
                              @ffi.store16((base1) + 8, (payload74).reinterpret_as_int())

                              ()
                        }
                        PrimU32(payload77) => {
                              @ffi.store8((base1) + 0, (10))
                              @ffi.store32((base1) + 8, (payload77).reinterpret_as_int())

                              ()
                        }
                        PrimU64(payload80) => {
                              @ffi.store8((base1) + 0, (11))
                              @ffi.store64((base1) + 8, (payload80).reinterpret_as_int64())

                              ()
                        }
                        PrimS8(payload83) => {
                              @ffi.store8((base1) + 0, (12))
                              @ffi.store8((base1) + 8, @ffi.extend8(payload83))

                              ()
                        }
                        PrimS16(payload86) => {
                              @ffi.store8((base1) + 0, (13))
                              @ffi.store16((base1) + 8, @ffi.extend16(payload86))

                              ()
                        }
                        PrimS32(payload89) => {
                              @ffi.store8((base1) + 0, (14))
                              @ffi.store32((base1) + 8, payload89)

                              ()
                        }
                        PrimS64(payload92) => {
                              @ffi.store8((base1) + 0, (15))
                              @ffi.store64((base1) + 8, payload92)

                              ()
                        }
                        PrimFloat32(payload95) => {
                              @ffi.store8((base1) + 0, (16))
                              @ffi.storef32((base1) + 8, payload95)

                              ()
                        }
                        PrimFloat64(payload98) => {
                              @ffi.store8((base1) + 0, (17))
                              @ffi.storef64((base1) + 8, payload98)

                              ()
                        }
                        PrimChar(payload101) => {
                              @ffi.store8((base1) + 0, (18))
                              @ffi.store32((base1) + 8, (payload101).to_int())

                              ()
                        }
                        PrimBool(payload104) => {
                              @ffi.store8((base1) + 0, (19))
                              @ffi.store8((base1) + 8, (if payload104 { 1 } else { 0 }))

                              ()
                        }
                        PrimString(payload107) => {
                              @ffi.store8((base1) + 0, (20))
                              @ffi.store32((base1) + 12, payload107.iter().count())
                              @ffi.store32((base1) + 8, @ffi.str2ptr(payload107))
                              ignoreList.push(payload107)

                              ()
                        }
                        Handle(payload110) => {
                              @ffi.store8((base1) + 0, (21))
                              @ffi.store32((base1) + 12, ((payload110).0).value.iter().count())
                              @ffi.store32((base1) + 8, @ffi.str2ptr(((payload110).0).value))
                              @ffi.store64((base1) + 16, ((payload110).1).reinterpret_as_int64())
                              ignoreList.push(((payload110).0).value)

                              ()
                        }
                  }

            }
            @ffi.store32((base) + 4, ((element).nodes).length())
            @ffi.store32((base) + 0, address111)
            cleanupList.push({address: address111, size: ((element).nodes).length() * 24, align: 8})

      }
      let return_area = @ffi.malloc(16)
      wasmImportMethodWasmRpcInvokeAndAwait(handle, @ffi.str2ptr(function_name), function_name.iter().count(), address113, (function_params).length(), return_area);

      let lifted221 = match (@ffi.load8_u((return_area) + 0)) {
            0 => {

                  let array204 : Array[WitNode] = [];
                  for index205 = 0; index205 < (@ffi.load32((return_area) + 8)); index205 = index205 + 1 {
                        let base118 = (@ffi.load32((return_area) + 4)) + (index205 * 24)

                        let lifted203 = match (@ffi.load8_u((base118) + 0)) {
                              0 => {

                                    let array : Array[Int] = [];
                                    for index123 = 0; index123 < (@ffi.load32((base118) + 12)); index123 = index123 + 1 {
                                          let base122 = (@ffi.load32((base118) + 8)) + (index123 * 4)

                                          array.push(@ffi.load32((base122) + 0))
                                    }
                                    @ffi.free(@ffi.load32((base118) + 8))

                                    WitNode::RecordValue(array)
                              }
                              1 => {

                                    let lifted : Int? = match @ffi.load8_u((base118) + 12) {
                                          0 => Option::None
                                          1 => {

                                                Option::Some(@ffi.load32((base118) + 16))
                                          }
                                          _ => panic()
                                    }

                                    WitNode::VariantValue(((@ffi.load32((base118) + 8)).reinterpret_as_uint(), lifted))
                              }
                              2 => {

                                    WitNode::EnumValue((@ffi.load32((base118) + 8)).reinterpret_as_uint())
                              }
                              3 => {

                                    let array136 : Array[Bool] = [];
                                    for index137 = 0; index137 < (@ffi.load32((base118) + 12)); index137 = index137 + 1 {
                                          let base135 = (@ffi.load32((base118) + 8)) + (index137 * 1)

                                          array136.push((@ffi.load8_u((base135) + 0) != 0))
                                    }
                                    @ffi.free(@ffi.load32((base118) + 8))

                                    WitNode::FlagsValue(array136)
                              }
                              4 => {

                                    let array142 : Array[Int] = [];
                                    for index143 = 0; index143 < (@ffi.load32((base118) + 12)); index143 = index143 + 1 {
                                          let base141 = (@ffi.load32((base118) + 8)) + (index143 * 4)

                                          array142.push(@ffi.load32((base141) + 0))
                                    }
                                    @ffi.free(@ffi.load32((base118) + 8))

                                    WitNode::TupleValue(array142)
                              }
                              5 => {

                                    let array148 : Array[Int] = [];
                                    for index149 = 0; index149 < (@ffi.load32((base118) + 12)); index149 = index149 + 1 {
                                          let base147 = (@ffi.load32((base118) + 8)) + (index149 * 4)

                                          array148.push(@ffi.load32((base147) + 0))
                                    }
                                    @ffi.free(@ffi.load32((base118) + 8))

                                    WitNode::ListValue(array148)
                              }
                              6 => {

                                    let lifted156 : Int? = match @ffi.load8_u((base118) + 8) {
                                          0 => Option::None
                                          1 => {

                                                Option::Some(@ffi.load32((base118) + 12))
                                          }
                                          _ => panic()
                                    }

                                    WitNode::OptionValue(lifted156)
                              }
                              7 => {

                                    let lifted173 = match (@ffi.load8_u((base118) + 8)) {
                                          0 => {

                                                let lifted165 : Int? = match @ffi.load8_u((base118) + 12) {
                                                      0 => Option::None
                                                      1 => {

                                                            Option::Some(@ffi.load32((base118) + 16))
                                                      }
                                                      _ => panic()
                                                }

                                                Result::Ok(lifted165)
                                          }
                                          1 => {

                                                let lifted172 : Int? = match @ffi.load8_u((base118) + 12) {
                                                      0 => Option::None
                                                      1 => {

                                                            Option::Some(@ffi.load32((base118) + 16))
                                                      }
                                                      _ => panic()
                                                }

                                                Result::Err(lifted172)
                                          }
                                          _ => panic()
                                    }

                                    WitNode::ResultValue(lifted173)
                              }
                              8 => {

                                    WitNode::PrimU8((@ffi.load8_u((base118) + 8)).to_byte())
                              }
                              9 => {

                                    WitNode::PrimU16((@ffi.load16_u((base118) + 8).land(0xFFFF).reinterpret_as_uint()))
                              }
                              10 => {

                                    WitNode::PrimU32((@ffi.load32((base118) + 8)).reinterpret_as_uint())
                              }
                              11 => {

                                    WitNode::PrimU64((@ffi.load64((base118) + 8)).reinterpret_as_uint64())
                              }
                              12 => {

                                    WitNode::PrimS8((@ffi.load8((base118) + 8) - 0x100))
                              }
                              13 => {

                                    WitNode::PrimS16((@ffi.load16((base118) + 8) - 0x10000))
                              }
                              14 => {

                                    WitNode::PrimS32(@ffi.load32((base118) + 8))
                              }
                              15 => {

                                    WitNode::PrimS64(@ffi.load64((base118) + 8))
                              }
                              16 => {

                                    WitNode::PrimFloat32(@ffi.loadf32((base118) + 8))
                              }
                              17 => {

                                    WitNode::PrimFloat64(@ffi.loadf64((base118) + 8))
                              }
                              18 => {

                                    WitNode::PrimChar(Char::from_int(@ffi.load32((base118) + 8)))
                              }
                              19 => {

                                    WitNode::PrimBool((@ffi.load8_u((base118) + 8) != 0))
                              }
                              20 => {

                                    ignore(@ffi.load32((base118) + 12))
                                    let result = @ffi.ptr2str(@ffi.load32((base118) + 8))

                                    WitNode::PrimString(result)
                              }
                              21 => {

                                    ignore(@ffi.load32((base118) + 12))
                                    let result202 = @ffi.ptr2str(@ffi.load32((base118) + 8))

                                    WitNode::Handle((Uri::{value : result202}, (@ffi.load64((base118) + 16)).reinterpret_as_uint64()))
                              }
                              _ => panic()
                        }

                        array204.push(lifted203)
                  }
                  @ffi.free(@ffi.load32((return_area) + 4))

                  Result::Ok(WitValue::{nodes : array204})
            }
            1 => {

                  let lifted220 = match (@ffi.load8_u((return_area) + 4)) {
                        0 => {

                              ignore(@ffi.load32((return_area) + 12))
                              let result210 = @ffi.ptr2str(@ffi.load32((return_area) + 8))

                              RpcError::ProtocolError(result210)
                        }
                        1 => {

                              ignore(@ffi.load32((return_area) + 12))
                              let result213 = @ffi.ptr2str(@ffi.load32((return_area) + 8))

                              RpcError::Denied(result213)
                        }
                        2 => {

                              ignore(@ffi.load32((return_area) + 12))
                              let result216 = @ffi.ptr2str(@ffi.load32((return_area) + 8))

                              RpcError::NotFound(result216)
                        }
                        3 => {

                              ignore(@ffi.load32((return_area) + 12))
                              let result219 = @ffi.ptr2str(@ffi.load32((return_area) + 8))

                              RpcError::RemoteInternalError(result219)
                        }
                        _ => panic()
                  }

                  Result::Err(lifted220)
            }
            _ => panic()
      }
      ignore(function_name)
      @ffi.free(address113)
      @ffi.free(return_area)

      cleanupList.each(fn(cleanup) {
            @ffi.free(cleanup.address);
      })
      ignore(ignoreList)
      return lifted221

}

pub fn WasmRpc::invoke(self : WasmRpc, function_name : String, function_params : Array[WitValue]) -> Result[Unit, RpcError] {
      let cleanupList : Array[@ffi.Cleanup] = []
      let ignoreList : Array[&@ffi.Any] = []

      let WasmRpc(handle) = self

      let address113 = @ffi.malloc((function_params).length() * 8);
      for index114 = 0; index114 < (function_params).length(); index114 = index114 + 1 {
            let element : WitValue = (function_params)[(index114)]
            let base = address113 + (index114 * 8);

            let address111 = @ffi.malloc(((element).nodes).length() * 24);
            for index112 = 0; index112 < ((element).nodes).length(); index112 = index112 + 1 {
                  let element0 : WitNode = ((element).nodes)[(index112)]
                  let base1 = address111 + (index112 * 24);

                  match element0 {
                        RecordValue(payload) => {
                              @ffi.store8((base1) + 0, (0))

                              let address = @ffi.malloc((payload).length() * 4);
                              for index = 0; index < (payload).length(); index = index + 1 {
                                    let element4 : Int = (payload)[(index)]
                                    let base5 = address + (index * 4);
                                    @ffi.store32((base5) + 0, element4)

                              }
                              @ffi.store32((base1) + 12, (payload).length())
                              @ffi.store32((base1) + 8, address)
                              cleanupList.push({address: address, size: (payload).length() * 4, align: 4})

                              ()
                        }
                        VariantValue(payload8) => {
                              @ffi.store8((base1) + 0, (1))
                              @ffi.store32((base1) + 8, ((payload8).0).reinterpret_as_int())

                              match (((payload8).1)) {
                                    None => {
                                          @ffi.store8((base1) + 12, (0))

                                          ()
                                    }
                                    Some(payload14) => {
                                          @ffi.store8((base1) + 12, (1))
                                          @ffi.store32((base1) + 16, payload14)

                                          ()
                                    }
                              }

                              ()
                        }
                        EnumValue(payload17) => {
                              @ffi.store8((base1) + 0, (2))
                              @ffi.store32((base1) + 8, (payload17).reinterpret_as_int())

                              ()
                        }
                        FlagsValue(payload20) => {
                              @ffi.store8((base1) + 0, (3))

                              let address23 = @ffi.malloc((payload20).length() * 1);
                              for index24 = 0; index24 < (payload20).length(); index24 = index24 + 1 {
                                    let element21 : Bool = (payload20)[(index24)]
                                    let base22 = address23 + (index24 * 1);
                                    @ffi.store8((base22) + 0, (if element21 { 1 } else { 0 }))

                              }
                              @ffi.store32((base1) + 12, (payload20).length())
                              @ffi.store32((base1) + 8, address23)
                              cleanupList.push({address: address23, size: (payload20).length() * 1, align: 1})

                              ()
                        }
                        TupleValue(payload27) => {
                              @ffi.store8((base1) + 0, (4))

                              let address30 = @ffi.malloc((payload27).length() * 4);
                              for index31 = 0; index31 < (payload27).length(); index31 = index31 + 1 {
                                    let element28 : Int = (payload27)[(index31)]
                                    let base29 = address30 + (index31 * 4);
                                    @ffi.store32((base29) + 0, element28)

                              }
                              @ffi.store32((base1) + 12, (payload27).length())
                              @ffi.store32((base1) + 8, address30)
                              cleanupList.push({address: address30, size: (payload27).length() * 4, align: 4})

                              ()
                        }
                        ListValue(payload34) => {
                              @ffi.store8((base1) + 0, (5))

                              let address37 = @ffi.malloc((payload34).length() * 4);
                              for index38 = 0; index38 < (payload34).length(); index38 = index38 + 1 {
                                    let element35 : Int = (payload34)[(index38)]
                                    let base36 = address37 + (index38 * 4);
                                    @ffi.store32((base36) + 0, element35)

                              }
                              @ffi.store32((base1) + 12, (payload34).length())
                              @ffi.store32((base1) + 8, address37)
                              cleanupList.push({address: address37, size: (payload34).length() * 4, align: 4})

                              ()
                        }
                        OptionValue(payload41) => {
                              @ffi.store8((base1) + 0, (6))

                              match ((payload41)) {
                                    None => {
                                          @ffi.store8((base1) + 8, (0))

                                          ()
                                    }
                                    Some(payload47) => {
                                          @ffi.store8((base1) + 8, (1))
                                          @ffi.store32((base1) + 12, payload47)

                                          ()
                                    }
                              }

                              ()
                        }
                        ResultValue(payload50) => {
                              @ffi.store8((base1) + 0, (7))

                              match payload50 {
                                    Ok(payload53) => {
                                          @ffi.store8((base1) + 8, (0))

                                          match ((payload53)) {
                                                None => {
                                                      @ffi.store8((base1) + 12, (0))

                                                      ()
                                                }
                                                Some(payload59) => {
                                                      @ffi.store8((base1) + 12, (1))
                                                      @ffi.store32((base1) + 16, payload59)

                                                      ()
                                                }
                                          }

                                          ()
                                    }
                                    Err(payload62) => {
                                          @ffi.store8((base1) + 8, (1))

                                          match ((payload62)) {
                                                None => {
                                                      @ffi.store8((base1) + 12, (0))

                                                      ()
                                                }
                                                Some(payload68) => {
                                                      @ffi.store8((base1) + 12, (1))
                                                      @ffi.store32((base1) + 16, payload68)

                                                      ()
                                                }
                                          }

                                          ()
                                    }
                              }

                              ()
                        }
                        PrimU8(payload71) => {
                              @ffi.store8((base1) + 0, (8))
                              @ffi.store8((base1) + 8, (payload71).to_int())

                              ()
                        }
                        PrimU16(payload74) => {
                              @ffi.store8((base1) + 0, (9))
                              @ffi.store16((base1) + 8, (payload74).reinterpret_as_int())

                              ()
                        }
                        PrimU32(payload77) => {
                              @ffi.store8((base1) + 0, (10))
                              @ffi.store32((base1) + 8, (payload77).reinterpret_as_int())

                              ()
                        }
                        PrimU64(payload80) => {
                              @ffi.store8((base1) + 0, (11))
                              @ffi.store64((base1) + 8, (payload80).reinterpret_as_int64())

                              ()
                        }
                        PrimS8(payload83) => {
                              @ffi.store8((base1) + 0, (12))
                              @ffi.store8((base1) + 8, @ffi.extend8(payload83))

                              ()
                        }
                        PrimS16(payload86) => {
                              @ffi.store8((base1) + 0, (13))
                              @ffi.store16((base1) + 8, @ffi.extend16(payload86))

                              ()
                        }
                        PrimS32(payload89) => {
                              @ffi.store8((base1) + 0, (14))
                              @ffi.store32((base1) + 8, payload89)

                              ()
                        }
                        PrimS64(payload92) => {
                              @ffi.store8((base1) + 0, (15))
                              @ffi.store64((base1) + 8, payload92)

                              ()
                        }
                        PrimFloat32(payload95) => {
                              @ffi.store8((base1) + 0, (16))
                              @ffi.storef32((base1) + 8, payload95)

                              ()
                        }
                        PrimFloat64(payload98) => {
                              @ffi.store8((base1) + 0, (17))
                              @ffi.storef64((base1) + 8, payload98)

                              ()
                        }
                        PrimChar(payload101) => {
                              @ffi.store8((base1) + 0, (18))
                              @ffi.store32((base1) + 8, (payload101).to_int())

                              ()
                        }
                        PrimBool(payload104) => {
                              @ffi.store8((base1) + 0, (19))
                              @ffi.store8((base1) + 8, (if payload104 { 1 } else { 0 }))

                              ()
                        }
                        PrimString(payload107) => {
                              @ffi.store8((base1) + 0, (20))
                              @ffi.store32((base1) + 12, payload107.iter().count())
                              @ffi.store32((base1) + 8, @ffi.str2ptr(payload107))
                              ignoreList.push(payload107)

                              ()
                        }
                        Handle(payload110) => {
                              @ffi.store8((base1) + 0, (21))
                              @ffi.store32((base1) + 12, ((payload110).0).value.iter().count())
                              @ffi.store32((base1) + 8, @ffi.str2ptr(((payload110).0).value))
                              @ffi.store64((base1) + 16, ((payload110).1).reinterpret_as_int64())
                              ignoreList.push(((payload110).0).value)

                              ()
                        }
                  }

            }
            @ffi.store32((base) + 4, ((element).nodes).length())
            @ffi.store32((base) + 0, address111)
            cleanupList.push({address: address111, size: ((element).nodes).length() * 24, align: 8})

      }
      let return_area = @ffi.malloc(16)
      wasmImportMethodWasmRpcInvoke(handle, @ffi.str2ptr(function_name), function_name.iter().count(), address113, (function_params).length(), return_area);

      let lifted130 = match (@ffi.load8_u((return_area) + 0)) {
            0 => {

                  Result::Ok(())
            }
            1 => {

                  let lifted = match (@ffi.load8_u((return_area) + 4)) {
                        0 => {

                              ignore(@ffi.load32((return_area) + 12))
                              let result = @ffi.ptr2str(@ffi.load32((return_area) + 8))

                              RpcError::ProtocolError(result)
                        }
                        1 => {

                              ignore(@ffi.load32((return_area) + 12))
                              let result123 = @ffi.ptr2str(@ffi.load32((return_area) + 8))

                              RpcError::Denied(result123)
                        }
                        2 => {

                              ignore(@ffi.load32((return_area) + 12))
                              let result126 = @ffi.ptr2str(@ffi.load32((return_area) + 8))

                              RpcError::NotFound(result126)
                        }
                        3 => {

                              ignore(@ffi.load32((return_area) + 12))
                              let result129 = @ffi.ptr2str(@ffi.load32((return_area) + 8))

                              RpcError::RemoteInternalError(result129)
                        }
                        _ => panic()
                  }

                  Result::Err(lifted)
            }
            _ => panic()
      }
      ignore(function_name)
      @ffi.free(address113)
      @ffi.free(return_area)

      cleanupList.each(fn(cleanup) {
            @ffi.free(cleanup.address);
      })
      ignore(ignoreList)
      return lifted130

}

pub fn WasmRpc::async_invoke_and_await(self : WasmRpc, function_name : String, function_params : Array[WitValue]) -> FutureInvokeResult {
      let cleanupList : Array[@ffi.Cleanup] = []
      let ignoreList : Array[&@ffi.Any] = []

      let WasmRpc(handle) = self

      let address113 = @ffi.malloc((function_params).length() * 8);
      for index114 = 0; index114 < (function_params).length(); index114 = index114 + 1 {
            let element : WitValue = (function_params)[(index114)]
            let base = address113 + (index114 * 8);

            let address111 = @ffi.malloc(((element).nodes).length() * 24);
            for index112 = 0; index112 < ((element).nodes).length(); index112 = index112 + 1 {
                  let element0 : WitNode = ((element).nodes)[(index112)]
                  let base1 = address111 + (index112 * 24);

                  match element0 {
                        RecordValue(payload) => {
                              @ffi.store8((base1) + 0, (0))

                              let address = @ffi.malloc((payload).length() * 4);
                              for index = 0; index < (payload).length(); index = index + 1 {
                                    let element4 : Int = (payload)[(index)]
                                    let base5 = address + (index * 4);
                                    @ffi.store32((base5) + 0, element4)

                              }
                              @ffi.store32((base1) + 12, (payload).length())
                              @ffi.store32((base1) + 8, address)
                              cleanupList.push({address: address, size: (payload).length() * 4, align: 4})

                              ()
                        }
                        VariantValue(payload8) => {
                              @ffi.store8((base1) + 0, (1))
                              @ffi.store32((base1) + 8, ((payload8).0).reinterpret_as_int())

                              match (((payload8).1)) {
                                    None => {
                                          @ffi.store8((base1) + 12, (0))

                                          ()
                                    }
                                    Some(payload14) => {
                                          @ffi.store8((base1) + 12, (1))
                                          @ffi.store32((base1) + 16, payload14)

                                          ()
                                    }
                              }

                              ()
                        }
                        EnumValue(payload17) => {
                              @ffi.store8((base1) + 0, (2))
                              @ffi.store32((base1) + 8, (payload17).reinterpret_as_int())

                              ()
                        }
                        FlagsValue(payload20) => {
                              @ffi.store8((base1) + 0, (3))

                              let address23 = @ffi.malloc((payload20).length() * 1);
                              for index24 = 0; index24 < (payload20).length(); index24 = index24 + 1 {
                                    let element21 : Bool = (payload20)[(index24)]
                                    let base22 = address23 + (index24 * 1);
                                    @ffi.store8((base22) + 0, (if element21 { 1 } else { 0 }))

                              }
                              @ffi.store32((base1) + 12, (payload20).length())
                              @ffi.store32((base1) + 8, address23)
                              cleanupList.push({address: address23, size: (payload20).length() * 1, align: 1})

                              ()
                        }
                        TupleValue(payload27) => {
                              @ffi.store8((base1) + 0, (4))

                              let address30 = @ffi.malloc((payload27).length() * 4);
                              for index31 = 0; index31 < (payload27).length(); index31 = index31 + 1 {
                                    let element28 : Int = (payload27)[(index31)]
                                    let base29 = address30 + (index31 * 4);
                                    @ffi.store32((base29) + 0, element28)

                              }
                              @ffi.store32((base1) + 12, (payload27).length())
                              @ffi.store32((base1) + 8, address30)
                              cleanupList.push({address: address30, size: (payload27).length() * 4, align: 4})

                              ()
                        }
                        ListValue(payload34) => {
                              @ffi.store8((base1) + 0, (5))

                              let address37 = @ffi.malloc((payload34).length() * 4);
                              for index38 = 0; index38 < (payload34).length(); index38 = index38 + 1 {
                                    let element35 : Int = (payload34)[(index38)]
                                    let base36 = address37 + (index38 * 4);
                                    @ffi.store32((base36) + 0, element35)

                              }
                              @ffi.store32((base1) + 12, (payload34).length())
                              @ffi.store32((base1) + 8, address37)
                              cleanupList.push({address: address37, size: (payload34).length() * 4, align: 4})

                              ()
                        }
                        OptionValue(payload41) => {
                              @ffi.store8((base1) + 0, (6))

                              match ((payload41)) {
                                    None => {
                                          @ffi.store8((base1) + 8, (0))

                                          ()
                                    }
                                    Some(payload47) => {
                                          @ffi.store8((base1) + 8, (1))
                                          @ffi.store32((base1) + 12, payload47)

                                          ()
                                    }
                              }

                              ()
                        }
                        ResultValue(payload50) => {
                              @ffi.store8((base1) + 0, (7))

                              match payload50 {
                                    Ok(payload53) => {
                                          @ffi.store8((base1) + 8, (0))

                                          match ((payload53)) {
                                                None => {
                                                      @ffi.store8((base1) + 12, (0))

                                                      ()
                                                }
                                                Some(payload59) => {
                                                      @ffi.store8((base1) + 12, (1))
                                                      @ffi.store32((base1) + 16, payload59)

                                                      ()
                                                }
                                          }

                                          ()
                                    }
                                    Err(payload62) => {
                                          @ffi.store8((base1) + 8, (1))

                                          match ((payload62)) {
                                                None => {
                                                      @ffi.store8((base1) + 12, (0))

                                                      ()
                                                }
                                                Some(payload68) => {
                                                      @ffi.store8((base1) + 12, (1))
                                                      @ffi.store32((base1) + 16, payload68)

                                                      ()
                                                }
                                          }

                                          ()
                                    }
                              }

                              ()
                        }
                        PrimU8(payload71) => {
                              @ffi.store8((base1) + 0, (8))
                              @ffi.store8((base1) + 8, (payload71).to_int())

                              ()
                        }
                        PrimU16(payload74) => {
                              @ffi.store8((base1) + 0, (9))
                              @ffi.store16((base1) + 8, (payload74).reinterpret_as_int())

                              ()
                        }
                        PrimU32(payload77) => {
                              @ffi.store8((base1) + 0, (10))
                              @ffi.store32((base1) + 8, (payload77).reinterpret_as_int())

                              ()
                        }
                        PrimU64(payload80) => {
                              @ffi.store8((base1) + 0, (11))
                              @ffi.store64((base1) + 8, (payload80).reinterpret_as_int64())

                              ()
                        }
                        PrimS8(payload83) => {
                              @ffi.store8((base1) + 0, (12))
                              @ffi.store8((base1) + 8, @ffi.extend8(payload83))

                              ()
                        }
                        PrimS16(payload86) => {
                              @ffi.store8((base1) + 0, (13))
                              @ffi.store16((base1) + 8, @ffi.extend16(payload86))

                              ()
                        }
                        PrimS32(payload89) => {
                              @ffi.store8((base1) + 0, (14))
                              @ffi.store32((base1) + 8, payload89)

                              ()
                        }
                        PrimS64(payload92) => {
                              @ffi.store8((base1) + 0, (15))
                              @ffi.store64((base1) + 8, payload92)

                              ()
                        }
                        PrimFloat32(payload95) => {
                              @ffi.store8((base1) + 0, (16))
                              @ffi.storef32((base1) + 8, payload95)

                              ()
                        }
                        PrimFloat64(payload98) => {
                              @ffi.store8((base1) + 0, (17))
                              @ffi.storef64((base1) + 8, payload98)

                              ()
                        }
                        PrimChar(payload101) => {
                              @ffi.store8((base1) + 0, (18))
                              @ffi.store32((base1) + 8, (payload101).to_int())

                              ()
                        }
                        PrimBool(payload104) => {
                              @ffi.store8((base1) + 0, (19))
                              @ffi.store8((base1) + 8, (if payload104 { 1 } else { 0 }))

                              ()
                        }
                        PrimString(payload107) => {
                              @ffi.store8((base1) + 0, (20))
                              @ffi.store32((base1) + 12, payload107.iter().count())
                              @ffi.store32((base1) + 8, @ffi.str2ptr(payload107))
                              ignoreList.push(payload107)

                              ()
                        }
                        Handle(payload110) => {
                              @ffi.store8((base1) + 0, (21))
                              @ffi.store32((base1) + 12, ((payload110).0).value.iter().count())
                              @ffi.store32((base1) + 8, @ffi.str2ptr(((payload110).0).value))
                              @ffi.store64((base1) + 16, ((payload110).1).reinterpret_as_int64())
                              ignoreList.push(((payload110).0).value)

                              ()
                        }
                  }

            }
            @ffi.store32((base) + 4, ((element).nodes).length())
            @ffi.store32((base) + 0, address111)
            cleanupList.push({address: address111, size: ((element).nodes).length() * 24, align: 8})

      }
      let result : Int =  wasmImportMethodWasmRpcAsyncInvokeAndAwait(handle, @ffi.str2ptr(function_name), function_name.iter().count(), address113, (function_params).length());
      ignore(function_name)
      @ffi.free(address113)

      cleanupList.each(fn(cleanup) {
            @ffi.free(cleanup.address);
      })
      ignore(ignoreList)
      return FutureInvokeResult::FutureInvokeResult(result)

}

pub fn FutureInvokeResult::subscribe(self : FutureInvokeResult) -> @poll.Pollable {

      let FutureInvokeResult(handle) = self
      let result : Int =  wasmImportMethodFutureInvokeResultSubscribe(handle);
      return @poll.Pollable::Pollable(result)

}

pub fn FutureInvokeResult::get(self : FutureInvokeResult) -> Result[WitValue, RpcError]? {

      let FutureInvokeResult(handle) = self
      let return_area = @ffi.malloc(20)
      wasmImportMethodFutureInvokeResultGet(handle, return_area);

      let lifted108 : Result[WitValue, RpcError]? = match @ffi.load8_u((return_area) + 0) {
            0 => Option::None
            1 => {

                  let lifted107 = match (@ffi.load8_u((return_area) + 4)) {
                        0 => {

                              let array90 : Array[WitNode] = [];
                              for index91 = 0; index91 < (@ffi.load32((return_area) + 12)); index91 = index91 + 1 {
                                    let base5 = (@ffi.load32((return_area) + 8)) + (index91 * 24)

                                    let lifted89 = match (@ffi.load8_u((base5) + 0)) {
                                          0 => {

                                                let array : Array[Int] = [];
                                                for index = 0; index < (@ffi.load32((base5) + 12)); index = index + 1 {
                                                      let base9 = (@ffi.load32((base5) + 8)) + (index * 4)

                                                      array.push(@ffi.load32((base9) + 0))
                                                }
                                                @ffi.free(@ffi.load32((base5) + 8))

                                                WitNode::RecordValue(array)
                                          }
                                          1 => {

                                                let lifted : Int? = match @ffi.load8_u((base5) + 12) {
                                                      0 => Option::None
                                                      1 => {

                                                            Option::Some(@ffi.load32((base5) + 16))
                                                      }
                                                      _ => panic()
                                                }

                                                WitNode::VariantValue(((@ffi.load32((base5) + 8)).reinterpret_as_uint(), lifted))
                                          }
                                          2 => {

                                                WitNode::EnumValue((@ffi.load32((base5) + 8)).reinterpret_as_uint())
                                          }
                                          3 => {

                                                let array22 : Array[Bool] = [];
                                                for index23 = 0; index23 < (@ffi.load32((base5) + 12)); index23 = index23 + 1 {
                                                      let base21 = (@ffi.load32((base5) + 8)) + (index23 * 1)

                                                      array22.push((@ffi.load8_u((base21) + 0) != 0))
                                                }
                                                @ffi.free(@ffi.load32((base5) + 8))

                                                WitNode::FlagsValue(array22)
                                          }
                                          4 => {

                                                let array28 : Array[Int] = [];
                                                for index29 = 0; index29 < (@ffi.load32((base5) + 12)); index29 = index29 + 1 {
                                                      let base27 = (@ffi.load32((base5) + 8)) + (index29 * 4)

                                                      array28.push(@ffi.load32((base27) + 0))
                                                }
                                                @ffi.free(@ffi.load32((base5) + 8))

                                                WitNode::TupleValue(array28)
                                          }
                                          5 => {

                                                let array34 : Array[Int] = [];
                                                for index35 = 0; index35 < (@ffi.load32((base5) + 12)); index35 = index35 + 1 {
                                                      let base33 = (@ffi.load32((base5) + 8)) + (index35 * 4)

                                                      array34.push(@ffi.load32((base33) + 0))
                                                }
                                                @ffi.free(@ffi.load32((base5) + 8))

                                                WitNode::ListValue(array34)
                                          }
                                          6 => {

                                                let lifted42 : Int? = match @ffi.load8_u((base5) + 8) {
                                                      0 => Option::None
                                                      1 => {

                                                            Option::Some(@ffi.load32((base5) + 12))
                                                      }
                                                      _ => panic()
                                                }

                                                WitNode::OptionValue(lifted42)
                                          }
                                          7 => {

                                                let lifted59 = match (@ffi.load8_u((base5) + 8)) {
                                                      0 => {

                                                            let lifted51 : Int? = match @ffi.load8_u((base5) + 12) {
                                                                  0 => Option::None
                                                                  1 => {

                                                                        Option::Some(@ffi.load32((base5) + 16))
                                                                  }
                                                                  _ => panic()
                                                            }

                                                            Result::Ok(lifted51)
                                                      }
                                                      1 => {

                                                            let lifted58 : Int? = match @ffi.load8_u((base5) + 12) {
                                                                  0 => Option::None
                                                                  1 => {

                                                                        Option::Some(@ffi.load32((base5) + 16))
                                                                  }
                                                                  _ => panic()
                                                            }

                                                            Result::Err(lifted58)
                                                      }
                                                      _ => panic()
                                                }

                                                WitNode::ResultValue(lifted59)
                                          }
                                          8 => {

                                                WitNode::PrimU8((@ffi.load8_u((base5) + 8)).to_byte())
                                          }
                                          9 => {

                                                WitNode::PrimU16((@ffi.load16_u((base5) + 8).land(0xFFFF).reinterpret_as_uint()))
                                          }
                                          10 => {

                                                WitNode::PrimU32((@ffi.load32((base5) + 8)).reinterpret_as_uint())
                                          }
                                          11 => {

                                                WitNode::PrimU64((@ffi.load64((base5) + 8)).reinterpret_as_uint64())
                                          }
                                          12 => {

                                                WitNode::PrimS8((@ffi.load8((base5) + 8) - 0x100))
                                          }
                                          13 => {

                                                WitNode::PrimS16((@ffi.load16((base5) + 8) - 0x10000))
                                          }
                                          14 => {

                                                WitNode::PrimS32(@ffi.load32((base5) + 8))
                                          }
                                          15 => {

                                                WitNode::PrimS64(@ffi.load64((base5) + 8))
                                          }
                                          16 => {

                                                WitNode::PrimFloat32(@ffi.loadf32((base5) + 8))
                                          }
                                          17 => {

                                                WitNode::PrimFloat64(@ffi.loadf64((base5) + 8))
                                          }
                                          18 => {

                                                WitNode::PrimChar(Char::from_int(@ffi.load32((base5) + 8)))
                                          }
                                          19 => {

                                                WitNode::PrimBool((@ffi.load8_u((base5) + 8) != 0))
                                          }
                                          20 => {

                                                ignore(@ffi.load32((base5) + 12))
                                                let result = @ffi.ptr2str(@ffi.load32((base5) + 8))

                                                WitNode::PrimString(result)
                                          }
                                          21 => {

                                                ignore(@ffi.load32((base5) + 12))
                                                let result88 = @ffi.ptr2str(@ffi.load32((base5) + 8))

                                                WitNode::Handle((Uri::{value : result88}, (@ffi.load64((base5) + 16)).reinterpret_as_uint64()))
                                          }
                                          _ => panic()
                                    }

                                    array90.push(lifted89)
                              }
                              @ffi.free(@ffi.load32((return_area) + 8))

                              Result::Ok(WitValue::{nodes : array90})
                        }
                        1 => {

                              let lifted106 = match (@ffi.load8_u((return_area) + 8)) {
                                    0 => {

                                          ignore(@ffi.load32((return_area) + 16))
                                          let result96 = @ffi.ptr2str(@ffi.load32((return_area) + 12))

                                          RpcError::ProtocolError(result96)
                                    }
                                    1 => {

                                          ignore(@ffi.load32((return_area) + 16))
                                          let result99 = @ffi.ptr2str(@ffi.load32((return_area) + 12))

                                          RpcError::Denied(result99)
                                    }
                                    2 => {

                                          ignore(@ffi.load32((return_area) + 16))
                                          let result102 = @ffi.ptr2str(@ffi.load32((return_area) + 12))

                                          RpcError::NotFound(result102)
                                    }
                                    3 => {

                                          ignore(@ffi.load32((return_area) + 16))
                                          let result105 = @ffi.ptr2str(@ffi.load32((return_area) + 12))

                                          RpcError::RemoteInternalError(result105)
                                    }
                                    _ => panic()
                              }

                              Result::Err(lifted106)
                        }
                        _ => panic()
                  }

                  Option::Some(lifted107)
            }
            _ => panic()
      }
      @ffi.free(return_area)
      return lifted108

}

