// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!

pub fn wasmExportDeadline() -> Int {

      let (result) : (UInt64?) = @emailQuery.deadline();

      match ((result)) {
            None => {
                  @ffi.store8((return_area) + 0, (0))

                  ()
            }
            Some(payload2) => {
                  @ffi.store8((return_area) + 0, (1))
                  @ffi.store64((return_area) + 8, (payload2).reinterpret_as_int64())

                  ()
            }
      }
      return return_area

}

pub fn wasmExportRecipients() -> Int {

      let (result) : (Array[String]) = @emailQuery.recipients();

      let address = @ffi.malloc((result).length() * 8);
      for index = 0; index < (result).length(); index = index + 1 {
            let element : String = (result)[(index)]
            let base = address + (index * 8);
            @ffi.store32((base) + 4, element.iter().count())
            @ffi.store32((base) + 0, @ffi.str2ptr(element))

      }
      @ffi.store32((return_area) + 4, (result).length())
      @ffi.store32((return_area) + 0, address)
      return return_area

}

pub fn wasmExportRecipientsPostReturn(p0 : Int) -> Unit {

      for index = 0; index < (@ffi.load32((p0) + 4)); index = index + 1 {
            let base = (@ffi.load32((p0) + 0)) + (index * 8)
            @ffi.free(@ffi.load32((base) + 0))

      }
      @ffi.free(@ffi.load32((p0) + 0))

}

