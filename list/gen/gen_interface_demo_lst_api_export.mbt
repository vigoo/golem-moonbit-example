// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!

pub fn wasmExportAdd(p0 : Int64, p1 : Int, p2 : Int) -> Unit {

      ignore(p2)
      let result = @ffi.ptr2str(p1)

      let _ = @api.add(@api.Connection::{id : (p0).reinterpret_as_uint64()}, result);

}

pub fn wasmExportDelete(p0 : Int64, p1 : Int, p2 : Int) -> Unit {

      ignore(p2)
      let result = @ffi.ptr2str(p1)

      let _ = @api.delete(@api.Connection::{id : (p0).reinterpret_as_uint64()}, result);

}

pub fn wasmExportInsert(p0 : Int64, p1 : Int, p2 : Int, p3 : Int, p4 : Int) -> Unit {

      ignore(p2)
      let result = @ffi.ptr2str(p1)

      ignore(p4)
      let result0 = @ffi.ptr2str(p3)

      let _ = @api.insert(@api.Connection::{id : (p0).reinterpret_as_uint64()}, result, result0);

}

pub fn wasmExportGet() -> Int {

      let (result) : (Array[String]) = @api.get();

      let address = @ffi.malloc((result).length() * 8);
      for index = 0; index < (result).length(); index = index + 1 {
            let element : String = (result)[(index)]
            let base = address + (index * 8);
            @ffi.store32((base) + 4, element.iter().count())
            @ffi.store32((base) + 0, @ffi.str2ptr(element))

      }
      @ffi.store32((return_area) + 4, (result).length())
      @ffi.store32((return_area) + 0, address)
      return return_area

}

pub fn wasmExportGetPostReturn(p0 : Int) -> Unit {

      for index = 0; index < (@ffi.load32((p0) + 4)); index = index + 1 {
            let base = (@ffi.load32((p0) + 0)) + (index * 8)
            @ffi.free(@ffi.load32((base) + 0))

      }
      @ffi.free(@ffi.load32((p0) + 0))

}

pub fn wasmExportPoll(p0 : Int64) -> Int {

      let (result) : (Array[@api.Change]) = @api.poll(@api.Connection::{id : (p0).reinterpret_as_uint64()});

      let address = @ffi.malloc((result).length() * 20);
      for index = 0; index < (result).length(); index = index + 1 {
            let element : @api.Change = (result)[(index)]
            let base = address + (index * 20);

            match element {
                  Added(payload) => {
                        @ffi.store8((base) + 0, (0))
                        @ffi.store32((base) + 8, payload.iter().count())
                        @ffi.store32((base) + 4, @ffi.str2ptr(payload))

                        ()
                  }
                  Deleted(payload4) => {
                        @ffi.store8((base) + 0, (1))
                        @ffi.store32((base) + 8, payload4.iter().count())
                        @ffi.store32((base) + 4, @ffi.str2ptr(payload4))

                        ()
                  }
                  Inserted(payload7) => {
                        @ffi.store8((base) + 0, (2))
                        @ffi.store32((base) + 8, (payload7).after.iter().count())
                        @ffi.store32((base) + 4, @ffi.str2ptr((payload7).after))
                        @ffi.store32((base) + 16, (payload7).value.iter().count())
                        @ffi.store32((base) + 12, @ffi.str2ptr((payload7).value))

                        ()
                  }
            }

      }
      @ffi.store32((return_area) + 4, (result).length())
      @ffi.store32((return_area) + 0, address)
      return return_area

}

pub fn wasmExportPollPostReturn(p0 : Int) -> Unit {

      for index = 0; index < (@ffi.load32((p0) + 4)); index = index + 1 {
            let base = (@ffi.load32((p0) + 0)) + (index * 20)

            match (@ffi.load8_u((base) + 0)) {
                  0 => {
                        @ffi.free(@ffi.load32((base) + 4))

                  }
                  1 => {
                        @ffi.free(@ffi.load32((base) + 4))

                  }
                  2 => {
                        @ffi.free(@ffi.load32((base) + 4))
                        @ffi.free(@ffi.load32((base) + 12))

                  }
                  _ => panic()
            }

      }
      @ffi.free(@ffi.load32((p0) + 0))

}

pub fn wasmExportConnect(p0 : Int, p1 : Int) -> Int {

      ignore(p1)
      let result = @ffi.ptr2str(p0)

      let (result0) : ((@api.Connection, Array[String])) = @api.connect(result);
      @ffi.store64((return_area) + 0, (((result0).0).id).reinterpret_as_int64())

      let address = @ffi.malloc(((result0).1).length() * 8);
      for index = 0; index < ((result0).1).length(); index = index + 1 {
            let element : String = ((result0).1)[(index)]
            let base = address + (index * 8);
            @ffi.store32((base) + 4, element.iter().count())
            @ffi.store32((base) + 0, @ffi.str2ptr(element))

      }
      @ffi.store32((return_area) + 12, ((result0).1).length())
      @ffi.store32((return_area) + 8, address)
      return return_area

}

pub fn wasmExportConnectPostReturn(p0 : Int) -> Unit {

      for index = 0; index < (@ffi.load32((p0) + 12)); index = index + 1 {
            let base = (@ffi.load32((p0) + 8)) + (index * 8)
            @ffi.free(@ffi.load32((base) + 0))

      }
      @ffi.free(@ffi.load32((p0) + 8))

}

pub fn wasmExportDisconnect(p0 : Int64) -> Unit {

      let _ = @api.disconnect(@api.Connection::{id : (p0).reinterpret_as_uint64()});

}

pub fn wasmExportConnectedEditors() -> Int {

      let (result) : (Array[String]) = @api.connected_editors();

      let address = @ffi.malloc((result).length() * 8);
      for index = 0; index < (result).length(); index = index + 1 {
            let element : String = (result)[(index)]
            let base = address + (index * 8);
            @ffi.store32((base) + 4, element.iter().count())
            @ffi.store32((base) + 0, @ffi.str2ptr(element))

      }
      @ffi.store32((return_area) + 4, (result).length())
      @ffi.store32((return_area) + 0, address)
      return return_area

}

pub fn wasmExportConnectedEditorsPostReturn(p0 : Int) -> Unit {

      for index = 0; index < (@ffi.load32((p0) + 4)); index = index + 1 {
            let base = (@ffi.load32((p0) + 0)) + (index * 8)
            @ffi.free(@ffi.load32((base) + 0))

      }
      @ffi.free(@ffi.load32((p0) + 0))

}

pub fn wasmExportArchive() -> Unit {

      let _ = @api.archive();

}

pub fn wasmExportIsArchived() -> Int {

      let (result) : (Bool) = @api.is_archived();
      return (if result { 1 } else { 0 })

}

