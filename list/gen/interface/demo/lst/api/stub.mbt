// Generated by `wit-bindgen` 0.36.0.

///|
fn to_connection_id(c : Connection) -> @src.ConnectionId {
  @src.ConnectionId(c.id)
}

///|
fn convert_change(change : @src.Change) -> Change {
  match change {
    Added(value) => Change::Added(value)
    Inserted(after~, value~) => Change::Inserted({ after, value })
    Deleted(value) => Change::Deleted(value)
  }
}

///|
pub fn add(c : Connection, value : String) -> Result[Unit, String] {
  @src.state
  .add?(to_connection_id(c), value)
  .map_err(fn(err) { err.to_string() })
}

///|
pub fn delete(c : Connection, value : String) -> Result[Unit, String] {
  @src.state
  .delete?(to_connection_id(c), value)
  .map_err(fn(err) { err.to_string() })
}

///|
pub fn insert(
  c : Connection,
  after : String,
  value : String
) -> Result[Unit, String] {
  @src.state
  .insert?(to_connection_id(c), after~, value~)
  .map_err(fn(err) { err.to_string() })
}

///|
pub fn get() -> Array[String] {
  @src.state.document.get().iter().to_array()
}

///|
pub fn poll(c : Connection) -> Result[Array[Change], String] {
  @src.state
  .poll?(to_connection_id(c))
  .map(fn(changes) { changes.iter().map(convert_change).to_array() })
  .map_err(fn(err) { err.to_string() })
}

///|
pub fn connect(email : String) -> (Connection, Array[String]) {
  let (id, items) = @src.state.connect(email)
  ({ id: id._ }, items.iter().to_array())
}

///|
pub fn disconnect(c : Connection) -> Result[Unit, String] {
  @src.state
  .disconnect?(to_connection_id(c))
  .map_err(fn(err) { err.to_string() })
}

///|
pub fn connected_editors() -> Array[String] {
  @src.state.connected_editors().iter().map(fn(email) { email._ }).to_array()
}

///|
pub fn archive() -> Unit {
  @src.state.archive()
}

///|
pub fn is_archived() -> Bool {
  @src.state.is_archived()
}
