// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!

pub fn wasmExportGetAll() -> Int {

      let (result) : (Array[@api.ArchivedList]) = @api.get_all();

      let address2 = @ffi.malloc((result).length() * 16);
      for index3 = 0; index3 < (result).length(); index3 = index3 + 1 {
            let element : @api.ArchivedList = (result)[(index3)]
            let base = address2 + (index3 * 16);
            @ffi.store32((base) + 4, (element).name.iter().count())
            @ffi.store32((base) + 0, @ffi.str2ptr((element).name))

            let address = @ffi.malloc(((element).items).length() * 8);
            for index = 0; index < ((element).items).length(); index = index + 1 {
                  let element0 : String = ((element).items)[(index)]
                  let base1 = address + (index * 8);
                  @ffi.store32((base1) + 4, element0.iter().count())
                  @ffi.store32((base1) + 0, @ffi.str2ptr(element0))

            }
            @ffi.store32((base) + 12, ((element).items).length())
            @ffi.store32((base) + 8, address)

      }
      @ffi.store32((return_area) + 4, (result).length())
      @ffi.store32((return_area) + 0, address2)
      return return_area

}

pub fn wasmExportGetAllPostReturn(p0 : Int) -> Unit {

      for index2 = 0; index2 < (@ffi.load32((p0) + 4)); index2 = index2 + 1 {
            let base = (@ffi.load32((p0) + 0)) + (index2 * 16)
            @ffi.free(@ffi.load32((base) + 0))

            for index = 0; index < (@ffi.load32((base) + 12)); index = index + 1 {
                  let base1 = (@ffi.load32((base) + 8)) + (index * 8)
                  @ffi.free(@ffi.load32((base1) + 0))

            }
            @ffi.free(@ffi.load32((base) + 8))

      }
      @ffi.free(@ffi.load32((p0) + 0))

}

pub fn wasmExportStore(p0 : Int, p1 : Int, p2 : Int, p3 : Int) -> Unit {

      ignore(p1)
      let result = @ffi.ptr2str(p0)

      let array : Array[String] = [];
      for index = 0; index < (p3); index = index + 1 {
            let base = (p2) + (index * 8)

            ignore(@ffi.load32((base) + 4))
            let result0 = @ffi.ptr2str(@ffi.load32((base) + 0))

            array.push(result0)
      }
      @ffi.free(p2)

      let _ = @api.store(result, array);

}

